import asyncio
import aiohttp
import os
import sys  # Import sys for stderr and flushing
import traceback  # Import traceback for detailed error messages
from datetime import datetime

# Environment variables
GITHUB_REPOSITORY = os.getenv("GITHUB_REPOSITORY")
SONAR_TOKEN = os.getenv("SONAR_TOKEN")
DEVIN_API_KEY = os.getenv("DEVIN_API_KEY")
SONAR_ORG = os.getenv("SONAR_ORG")
SONAR_PROJECT_KEY = os.getenv("SONAR_PROJECT_KEY")
DEVIN_API_BASE = "https://api.devin.ai/v1"


async def get_sonarcloud_issues():
    """Fetch open vulnerabilities from SonarCloud."""
    url = "https://sonarcloud.io/api/issues/search"
    headers = {"Authorization": f"Bearer {SONAR_TOKEN}"}
    params = {
        "organization": SONAR_ORG,
        "projectKeys": SONAR_PROJECT_KEY,
        "types": "VULNERABILITY",
        "statuses": "OPEN",
    }

    print("Fetching SonarCloud issues...")  # Output for debugging
    sys.stdout.flush()  # Ensure output is flushed

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status != 200:
                    error_text = await response.text()
                    print(f"Error getting SonarCloud issues: {error_text}", file=sys.stderr)
                    sys.stderr.flush()
                    return []
                result = await response.json()
                num_issues = len(result.get("issues", []))
                print(f"Found {num_issues} issues")
                sys.stdout.flush()
                return result.get("issues", [])
        except Exception as e:
            print(f"Exception in get_sonarcloud_issues: {e}", file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            sys.stderr.flush()
            return []


async def delegate_task_to_devin(issue):
    """Delegate the entire task of fixing, committing, and pushing to Devin AI."""
    print(f"Delegating task to Devin for issue: {issue['key']}")
    sys.stdout.flush()

    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {DEVIN_API_KEY}"}
        prompt = f"""
        Fix the following vulnerability in {GITHUB_REPOSITORY}: {issue['message']} in file {issue['component']}.
        1. Create a new branch named 'devin/{issue['key']}-fix-vulnerability'.
        2. Implement the fix.
        3. Write a detailed commit message explaining the changes:
            - Issue Key: {issue['key']}
            - Component: {issue['component']}
            - Fixed by Devin AI at {datetime.now().isoformat()}
            - Include 'Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>'.
        4. Push the branch to the remote repository.
        5. Open a pull request with a description of the fix.
        """

        data = {"prompt": prompt, "idempotent": True}

        try:
            async with session.post(f"{DEVIN_API_BASE}/sessions", json=data, headers=headers) as response:
                if response.status != 200:
                    error_text = await response.text()
                    print(f"Error delegating task to Devin: {error_text}", file=sys.stderr)
                    sys.stderr.flush()
                    return None
                result = await response.json()
                print(f"Devin session created: {result}")
                sys.stdout.flush()
                return result
        except Exception as e:
            print(f"Exception in delegate_task_to_devin: {e}", file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            sys.stderr.flush()
            return None


async def monitor_devin_session(session_id):
    """Monitor Devin's progress until it completes the task."""
    print(f"Monitoring Devin session: {session_id}")
    sys.stdout.flush()

    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {DEVIN_API_KEY}"}

        while True:
            try:
                async with session.get(f"{DEVIN_API_BASE}/session/{session_id}", headers=headers) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        print(f"Error monitoring Devin session: {error_text}", file=sys.stderr)
                        sys.stderr.flush()
                        return None

                    result = await response.json()
                    status = result.get("status_enum")

                    if status in ["completed", "stopped"]:
                        print(f"Devin completed the task: {result}")
                        sys.stdout.flush()
                        return result
                    elif status == "blocked":
                        print("Devin encountered an issue. Please check manually.")
                        sys.stdout.flush()
                        return None

                    await asyncio.sleep(5)
            except Exception as e:
                print(f"Exception in monitor_devin_session: {e}", file=sys.stderr)
                traceback.print_exc(file=sys.stderr)
                sys.stderr.flush()
                return None


async def main():
    print("Starting Devin Remediation Script...")
    sys.stdout.flush()

    # Check environment variables FIRST
    if not all([GITHUB_REPOSITORY, SONAR_TOKEN, DEVIN_API_KEY, SONAR_ORG, SONAR_PROJECT_KEY]):
        print("Error: One or more required environment variables are not set.", file=sys.stderr)
        print(f"GITHUB_REPOSITORY: {GITHUB_REPOSITORY}", file=sys.stderr)
        print(f"SONAR_TOKEN: {'****' if SONAR_TOKEN else None}", file=sys.stderr)
        print(f"DEVIN_API_KEY: {'****' if DEVIN_API_KEY else None}", file=sys.stderr)
        print(f"SONAR_ORG: {SONAR_ORG}", file=sys.stderr)
        print(f"SONAR_PROJECT_KEY: {SONAR_PROJECT_KEY}", file=sys.stderr)
        sys.stderr.flush()
        sys.exit(1)  # Exit immediately if env vars are missing

    try:
        issues = await get_sonarcloud_issues()

        for issue in issues:
            print(f"Processing issue: {issue['key']}")
            sys.stdout.flush()

            # Delegate task to Devin AI
            session_data = await delegate_task_to_devin(issue)

            if session_data:
                session_id = session_data["session_id"]

                # Monitor Devin's progress
                await monitor_devin_session(session_id)

    except Exception as e:
        print(f"Error occurred in main: {str(e)}", file=sys.stderr)
        traceback.print_exc(file=sys.stderr)
        sys.stderr.flush()
        sys.exit(1)

    print("Devin Remediation Script finished.")
    sys.stdout.flush()


if __name__ == "__main__":
    asyncio.run(main())
