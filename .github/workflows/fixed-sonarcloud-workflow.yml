name: SonarCloud Scan and Devin Remediation
on:
  workflow_dispatch:
  pull_request:
    branches:
      - 'master'
jobs:
  analyze:
    name: Analyze and Remediate
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Debug Trigger Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Sender type: ${{ github.event.sender.type }}"
          echo "PR user login: ${{ github.event.pull_request.user.login }}"
          
      # Removed the check that was blocking automated users
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Install Dependencies
        run: pip install aiohttp
        
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
      - name: Run Devin Remediation
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # Use a PAT instead of GITHUB_TOKEN for better permissions
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Starting Devin Remediation script..."
          
          # Create a Python script to handle the remediation process
          cat > /tmp/run_devin_remediation.py << 'EOF'
import asyncio
import aiohttp
import os
import json
from datetime import datetime

# Environment variables
GITHUB_REPOSITORY = os.getenv("GITHUB_REPOSITORY")
SONAR_TOKEN = os.getenv("SONAR_TOKEN")
DEVIN_API_KEY = os.getenv("DEVIN_API_KEY")
SONAR_ORG = os.getenv("SONAR_ORG")
SONAR_PROJECT_KEY = os.getenv("SONAR_PROJECT_KEY")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
DEVIN_API_BASE = "https://api.devin.ai/v1"

async def get_sonarcloud_issues():
    """Fetch open vulnerabilities from SonarCloud."""
    url = "https://sonarcloud.io/api/issues/search"
    headers = {"Authorization": f"Bearer {SONAR_TOKEN}"}
    params = {
        "organization": SONAR_ORG,
        "projectKeys": SONAR_PROJECT_KEY,
        "types": "VULNERABILITY",
        "statuses": "OPEN"
    }
    
    print("Fetching SonarCloud issues with params:", params)
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            if response.status != 200:
                print(f"Error getting SonarCloud issues: {await response.text()}")
                return []
            result = await response.json()
            print(f"Found {len(result.get('issues', []))} issues")
            return result.get('issues', [])

async def create_devin_session(issues):
    """Create a single Devin session with prompts for all issues."""
    if not issues:
        print("No issues to fix")
        return None
        
    # Add timestamp to make branch name unique
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    branch_name = f"devin/fix-{timestamp}"
    
    # Create a prompt for each issue
    prompts = []
    for issue in issues:
        prompt = f"""
        Fix the following vulnerability in {GITHUB_REPOSITORY}: {issue['message']} in file {issue['component']}.
        1. Create a new branch named '{branch_name}' if it doesn't exist.
        2. Implement the fix.
        3. Write a detailed commit message explaining the changes:
            - Issue Key: {issue['key']}
            - Component: {issue['component']}
            - Fixed by Devin AI at {datetime.now().isoformat()}
            - Include 'Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>'.
        """
        prompts.append(prompt)
    
    # Combine all prompts into one session
    combined_prompt = "\n\n".join(prompts)
    print(f"Creating Devin session with branch: {branch_name}")
    print(f"Combined prompt contains {len(prompts)} issues")
    
    # Create the Devin session
    headers = {"Authorization": f"Bearer {DEVIN_API_KEY}"}
    data = {"prompt": combined_prompt, "idempotent": True}
    
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{DEVIN_API_BASE}/sessions", json=data, headers=headers) as response:
            if response.status != 200:
                print(f"Error creating Devin session: {await response.text()}")
                return None
            result = await response.json()
            print(f"Devin session created: {result.get('session_id')}")
            return result

async def monitor_devin_session(session_id):
    """Monitor Devin's progress until it completes the task."""
    if not session_id:
        return None
        
    headers = {"Authorization": f"Bearer {DEVIN_API_KEY}"}
    
    async with aiohttp.ClientSession() as session:
        while True:
            async with session.get(f"{DEVIN_API_BASE}/session/{session_id}", headers=headers) as response:
                if response.status != 200:
                    print(f"Error monitoring Devin session: {await response.text()}")
                    return None
                
                result = await response.json()
                status = result.get("status_enum")
                print(f"Devin session status: {status}")
                
                if status in ["completed", "stopped"]:
                    print(f"Devin completed the task")
                    return result
                elif status == "blocked":
                    print("Devin encountered an issue. Please check manually.")
                    return None
                
                # Wait before checking again
                await asyncio.sleep(30)

async def main():
    try:
        print("Starting SonarCloud issue remediation...")
        
        # Get issues from SonarCloud
        issues = await get_sonarcloud_issues()
        
        if issues:
            # Create a single Devin session with all issues
            session_data = await create_devin_session(issues)
            
            if session_data:
                session_id = session_data.get("session_id")
                print(f"Monitoring Devin session: {session_id}")
                
                # Monitor until completion
                result = await monitor_devin_session(session_id)
                
                if result:
                    print("Remediation completed successfully")
                    # No need to create PR here as Devin will handle it
                else:
                    print("Remediation failed or was blocked")
            else:
                print("Failed to create Devin session")
        else:
            print("No issues found to remediate")
            
    except Exception as e:
        print(f"Error in remediation process: {str(e)}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
EOF

          # Run the remediation script
          python /tmp/run_devin_remediation.py
          echo "Devin Remediation script finished."
          
      # Note: PR creation is handled by Devin directly through the prompts
      # This step is only a fallback if something goes wrong with Devin's PR creation
      - name: Create Fallback PR if needed
        if: failure()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_PAT }}
          commit-message: "Fix: Automated remediation of security issues"
          title: "Fix: Automated remediation of security issues"
          body: |
            This is a fallback PR created because the Devin-managed PR creation failed.
            
            This PR contains automated fixes for security issues identified by SonarCloud.
            
            Fixed by Devin AI Remediation workflow.
          branch: devin/fallback-fix-${{ github.run_id }}
          base: master
          
      - name: Handle Errors
        if: failure()
        run: |
          echo "An error occurred during the workflow!"
